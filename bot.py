import aiogram
from aiogram import Bot, Dispatcher, executor, types
import sqlite3
import config
from config import TOKEN
from db import Database


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
db = Database('database/bot_db.db')

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û —á–µ–º –≤–µ—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä?", callback_data="secondM"))
    if (not db.user_exists((message.from_user.id))):
        db.add_user(message.from_user.id)
        await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–Ω–∏–∫ü•∏üëãüèª\n\n –ù–∞–∑–æ–≤–∏ —Å–µ–±—è!")
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–Ω–∏–∫ü•∏üëãüèª\n"
                            "–Ø –≤–æ–≤—Å–µ –Ω–µ —É–¥–∏–≤–ª—ë–Ω —á—Ç–æ —Ç—ã —Ç—É—Ç, –≤–µ–¥—å –∫—É–¥–∞ –±—ã –¥–æ—Ä–æ–≥–∏ –Ω–µ –≤–µ–ª–∏, –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –Ω–∞–º) \n \n"
                            "–¢–∞–∫ —á—Ç–æ‚Ä¶ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–π—Å—è! –ò –≥–æ—Ç–æ–≤—å—Å—è —Å—Ç–∞—Ç—å —Ç–µ–º, –æ –∫–æ–º –±—É–¥—É—Ç —Å–ª–∞–≥–∞—Ç—å –ª–µ–≥–µ–Ω–¥—ã!", reply_markup=keyboard ,parse_mode="Markdown")


@dp.callback_query_handler(text="secondM")
async def SecondM_command(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="payment"))
    keyboard.add(types.InlineKeyboardButton(text="–£–¥–∏–≤–∏ –µ—â—ë!", callback_data="thirdM"))

    await call.message.answer("–¢—ã –Ω–∞—à –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Ç–∞–π–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ - *KUNI*üòù\n\n*–ë–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ*:\n -–¢—ã —Å—Ç–∞–Ω–µ—à—å –ª—É—á—à–∏–º –ª—é–±–æ–≤–Ω–∏–∫–æ–º!\n -–ü–æ–≤—ã—Å–∏—à—å –ª–∏—á–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å!\n -–†–∞—Å–∫—Ä–æ–µ—à—å —Ç–∞–ª–∞–Ω—Ç—ã –∏ –ø–æ–ª—É—á–∏—à—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏!\n\n–ó–∞ *EXTRA –æ–±—É—á–µ–Ω–∏–µ*, –ø—Ä–æ–≤–æ–¥—è—â–µ–µ—Å—è –≤ —Ä–∞–º–∫–∞—Ö —É–¥–æ–±–Ω–æ–≥–æ\n–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∞, —Ä–∞—Å–∫—Ä—ã—Ç–æ–≥–æ –≤ 3 –º–æ–¥—É–ª—è—Ö —Ç—ã —Å–æ —Å–≤–æ–µ–π —Å–ª–∞–¥–∫–æ–π\n–ø–æ–ª–æ–≤–∏–Ω–∫–æ–πüíò –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å –ø–∏–∫–∞ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è!üíó",reply_markup=keyboard,parse_mode="Markdown")

@dp.callback_query_handler(text="thirdM")
async def thirdM_command(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="payment"))
    keyboard.add(types.InlineKeyboardButton(text="–ú–Ω–µ –º–∞–ª–æ! –•–æ—á—É –µ—â—ë!!", callback_data="fourthM"))

    await call.message.answer("–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ —É –Ω–∞—Å –ø—Ä–∏–ø–∞—Å–µ–Ω—ã —Å–µ–∫—Ä–µ—Ç—ã ü§ê –æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç!\n\n–í–µ–¥—å –ø–æ–º–∏–º–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è *–õ–£–ß–®–ò–• –¢–ï–•–ù–ò–ö* —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º *–§–ò–†–ú–ï–ù–ù–´–• –õ–ê–ô–§–•–ê–ö–û–í*ü´Ç\n\n–ú—ã —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ—Ä–∞–±–æ—Ç–∫—É *–ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–•*, *–§–ò–ó–ò–û–õ–û–ì–ò–ß–ï–°–ö–ò–•* –∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ *–¢–ï–•–ù–ò–ß–ï–°–ö–ò–•*ü•¥ –ê–°–ü–ï–ö–¢–û–í!\n\n*–£–ñ–ï –ü–û–°–õ–ï –ü–ï–†–í–û–ô –ë–ê–ó–´* –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑–∏—Ç—å –ª—é–±—É—é, –µ—â—ë –∏ –ø–æ–∫–∞–∑–∞–≤ *–°–ï–†–¢–ò–§–ò–ö–ê–¢ –ú–ê–°–¢–ï–†–ê*ü´°",reply_markup=keyboard,parse_mode="Markdown")

@dp.callback_query_handler(text="fourthM")
async def fourthM_command(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="payment"))

    await call.message.answer("–û —á—ë–º –µ—â—ë –¥—É–º–∞—Ç—å! –¢—ã —á—Ç–æ!!!?? –¢—É–≥–æ–¥—É–º?! –ù–µ–±–æ—Å—å –µ—â—ë –∏ –≤ –ø–æ—Å—Ç–µ–ª–∏ —Ç–∞–∫–∞—è –∂–µ —à–Ω—è–≥–∞ü•±\n\n –¢–∞–∫ —á—Ç–æ —Å–º–æ—Ç—Ä–∏! –¢—ã –º–æ–∂–µ—à—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∂–∏–∑–Ω—å *—à—Ç—Ä—É–¥–∏—Ä—É—è* —Ç–æ–Ω–Ω—ã –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, –∞ –º–æ–∂–µ—à—å –ø—Ä–∏–π—Ç–∏ –∫ –Ω–∞–º –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –∏ —Å–¥–µ–ª–∞—Ç—å *–õ–£–ß–®–ò–ô –ü–û–î–ê–†–û–ö –í–¢–û–†–û–ô –ü–û–õ–û–í–ò–ù–ö–ï!*\n\n",parse_mode="Markdown")
    await call.message.answer("–û—Ç–≤–µ—Ç –±–µ–∑ —Å–æ–º–Ω–µ–Ω–∏–π –ø—Ä–æ—Å—Ç!\n\n–í–∫–ª–∞–¥—ã–≤–∞—é –∫–æ–ø–µ–π–∫–∏ –≤ –Ω–∞—à–µ –æ–±—É—á–µ–Ω–∏–µ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Ç–æ, —á—Ç–æ –ù–ï –°–û–ë–ï–†–Å–¢ –ù–ò –û–î–ò–ù –ü–û–ò–°–ö–û–í–ò–ö,üëéüèª –∞ —É–∂ —Ç–µ–º –±–æ–ª–µ–µ –ù–ï –ü–û–î–°–ö–ê–ñ–ï–¢ –ó–ê–¶üîû–ù–ó–£–†–ò–†–û–í–ê–ù–ù–ê–Ø –ù–ï–ô–†–û–ù–ù–ê–Ø –°–ï–¢–¨. \n–ë–µ–≥–∏ –æ–ø–ª–∞—á–∏–≤–∞–π –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π –∫ –æ–±—É—á–µ–Ω–∏—é...üèÉüèº ",reply_markup=keyboard,parse_mode="Markdown")

@dp.callback_query_handler(text="payment")
async def payment_command(call: types.CallbackQuery):
    await bot.send_invoice(call.message.chat.id, '–ö—É–ø–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ', '–ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–∞ –ø–æ –ö—É–Ω–∏', 'invoce',config.PAYMENT_TOKEN, 'RUB', [types.LabeledPrice('–ö—É–ø–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ', 969 * 100)])

@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

if __name__ == '__main__':
    executor.start_polling(dp)